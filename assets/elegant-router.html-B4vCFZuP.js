import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,d as t}from"./app-BWoNCIuP.js";const e={},p=t(`<p><code>Windward</code> routes are implemented as functions, and currently there are several types of route registration functions</p><h1 id="supplier" tabindex="-1"><a class="header-anchor" href="#supplier"><span>Supplier</span></a></h1><p>In regular writing, we might write it like this, which is obviously too long</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Windward</span><span class="token punctuation">.</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> simpleWindwardContext <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            simpleWindwardContext<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>For the same effect, we could write this</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Windward</span><span class="token punctuation">.</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="consumer" tabindex="-1"><a class="header-anchor" href="#consumer"><span>Consumer</span></a></h1><p>The definition of the routing function we may have is in a separate class file or files and is not put together with the startup of the service, which is where method references come in handy</p><p>The interface function looks like this</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserRouterFunction</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token class-name">SimpleWindwardContext</span> simpleWindwardContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        simpleWindwardContext<span class="token punctuation">.</span><span class="token function">writeJson</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">&quot;&quot;&quot;
                {
                &quot;id&quot; : 1
                }
                &quot;&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">selectTwo</span><span class="token punctuation">(</span><span class="token class-name">SimpleWindwardContext</span> simpleWindwardContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        simpleWindwardContext<span class="token punctuation">.</span><span class="token function">writeJson</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">&quot;&quot;&quot;
                {
                &quot;id&quot; : 2
                }
                &quot;&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Route registration for static methods can be written like this</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Windward</span><span class="token punctuation">.</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/one&quot;</span><span class="token punctuation">,</span> <span class="token class-name">UserRouterFunction</span><span class="token operator">::</span><span class="token function">selectOne</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>For non-static methods, we use references to instances, but of course, it&#39;s better if you integrate DI containers!</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">UserRouterFunction</span> userRouterFunction <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserRouterFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Windward</span><span class="token punctuation">.</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/two&quot;</span><span class="token punctuation">,</span> userRouterFunction<span class="token operator">::</span><span class="token function">selectTwo</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="function" tabindex="-1"><a class="header-anchor" href="#function"><span>Function</span></a></h1><p><code>Function</code> currently supports several implementations of <code>EnhancedWindwardContext</code>, the most common being <code>JsonWindwardContext</code></p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>The <code>JsonWindwardContext</code> automatically serialises the function&#39;s return value and responds as JSON.</p></div><p>The following is a simple <code>JsonWindwardContext</code> example</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>

  <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">User</span> <span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token class-name">JsonWindwardContext</span> jsonWindwardContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;Jay&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Windward</span><span class="token punctuation">.</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Application</span><span class="token operator">::</span><span class="token function">selectUser</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container important"><p class="hint-container-title">Important</p><p>Of course, you can also implement your own <code>WindwardContext</code> by referring to <code>JsonWindwardContext</code>.</p></div>`,21),o=[p];function c(i,l){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","elegant-router.html.vue"]]),k=JSON.parse('{"path":"/router/elegant-router.html","title":"Elegant Router","lang":"en-US","frontmatter":{"lang":"en-US","title":"Elegant Router","description":"Elegant Router"},"headers":[],"git":{"createdTime":1707959527000,"updatedTime":1707959527000,"contributors":[{"name":"esotericman","email":"justmysteriousman@163.com","commits":1}]},"readingTime":{"minutes":0.89,"words":266},"filePathRelative":"router/elegant-router.md","localizedDate":"February 15, 2024"}');export{d as comp,k as data};
